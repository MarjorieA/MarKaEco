{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Token from '../abis/Token.json';\nimport EthSwap from '../abis/EthSwap.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport './App.css';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport QRCode from 'qrcode.react'; // Librería para generar el código QR\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, _accounts, ethBalance, networkId, tokenData, token, tokenBalance, ethSwapData, ethSwap;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof window.ethereum !== 'undefined')) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                _accounts = _context2.sent;\n                this.setState({\n                  account: _accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.getBalance(this.state.account);\n\n              case 8:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); // Load Token\n\n                networkId = web3.eth.net.getId();\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                token = new web3.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                this.setState({\n                  accounts: _accounts[0]\n                }); //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n\n                _context2.next = 18;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 18:\n                tokenBalance = _context2.sent;\n\n                if (tokenBalance != null) {\n                  this.setState({\n                    tokenBalance: tokenBalance.toString()\n                  });\n                }\n\n                _context2.next = 23;\n                break;\n\n              case 22:\n                window.alert('Token contract not deployed to detected network.');\n\n              case 23:\n                // Load EthSwap\n                ethSwapData = EthSwap.networks[networkId];\n\n                if (ethSwapData) {\n                  ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                  this.setState({\n                    ethSwap: ethSwap\n                  });\n                } else {\n                  window.alert('EthSwap contract not deployed to detected network.');\n                }\n\n                this.setState({\n                  loading: false\n                });\n                _context2.next = 28;\n                break;\n\n              case 28:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _Web;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  _Web = require('web3'); ///NI\n                  // Asegúrate de que web3 está conectado al nodo de Ganache o MetaMask\n\n                  window.web3 = new _Web(window.ethereum || 'HTTP://192.168.0.6:8545'); // Usar MetaMask o el nodo local\n                  // const window.web3 = new Web3(new Web3.providers.HttpProvider(uri));\n                  //window.web3 = new Web3(window.ethereum)\n                  // Asegúrate de que web3 está configurado correctamente\n                  //const web3 = new Web3('http://127.0.0.1:8545');  // Nodo local de Ganache\n                  // Verificar la conexión\n\n                  window.web3.eth.net.isListening().then(function () {\n                    window.alert(\"Bienvenida a SOFTMarKa: Estas conectada a la red cuentas de Ethereum con ID: KatheVA\");\n                  }).catch(function (err) {\n                    console.error('No se pudo conectar al nodo local:', err);\n                    window.alert(\"aqui no Conectado a la red con ID: \".concat(err));\n                  }); // Obtener el networkId de la red conectada\n                  //const networkId =  5777\n                  //window.alert(5777);\n\n                  window.web3.eth.net.getId().then(function (networkId) {\n                    //   window.alert('ENTRO')\n                    window.web3.eth.getAccounts().then(function (accounts) {\n                      // window.alert(accounts[0]);\n                      _this2.setState({\n                        account: accounts[0]\n                      });\n\n                      _this2.state.account = accounts[0];\n                      window.web3.eth.getBalance(_this2.state.account).then(function (balance) {\n                        // Convertir el balance de Wei a Ether\n                        ///   window.alert(balance);\n                        var weiBalance = window.web3.utils.toWei(balance, 'ether');\n                        var ethBalance = window.web3.utils.fromWei(weiBalance, 'ether');\n\n                        _this2.setState({\n                          ethBalance: ethBalance\n                        }); //  window.alert(balance);\n\n                      });\n                    }).catch(function (error) {\n                      window.alert(error);\n                    }); // window.alert(networkId)\n\n                    var tokenData = Token.networks[networkId]; // Token es tu contrato ABI y redes\n                    // window.alert(tokenData)\n\n                    if (tokenData) {\n                      window.alert('entra ');\n                      var tokenAddress = tokenData.address; // Crear una instancia del contrato Token en esa red\n\n                      var token = new window.web3.eth.Contract(Token.abi, tokenAddress);\n\n                      _this2.setState({\n                        token: token\n                      });\n\n                      _this2.setState({\n                        accounts: accounts[0]\n                      }); //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n\n\n                      var tokenBalance = token.methods.balanceOf(_this2.state.account).call();\n\n                      if (tokenBalance != null) {\n                        _this2.setState({\n                          tokenBalance: tokenBalance.toString()\n                        });\n                      } else {\n                        window.alert('Token contract not deployed to detected network.');\n                      } // console.log(\"Instancia del contrato\", tokenContract);\n\n                    } else {\n                      console.error(\"No se encontró información para el networkId\", networkId);\n                    } // Load EthSwap\n\n\n                    var ethSwapData = EthSwap.networks[5777];\n\n                    if (ethSwapData) {\n                      //  const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n                      var ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                      ethSwap.address = ethSwapData.address;\n                      window.alert(ethSwap.address);\n\n                      _this2.setState({\n                        ethSwap: ethSwap\n                      });\n                    } else {\n                      window.alert('aqio06 EthSwap contract not deployed to detected network.');\n                    }\n\n                    _this2.setState({\n                      loading: false\n                    }); // window.alert('AQUI05')\n\n                  }).catch(function (error) {\n                    // console.error('Error al obtener el networkId:', error);\n                    window.alert(\"\\xC0QUI01 NO Conectado a la red con ID:}\" + error);\n                  }); // FIB\n                  ///fin\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      //window.alert('this.state.account:!'+this.state.methods);\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.ethSwap.methods.buyTokens().send({\n        value: etherAmount,\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.sellTokens = function (tokenAmount) {\n      window.alert('this.state.token!' + _this.state.token);\n      window.alert('this.state.token.methods!' + _this.state.token.methods); // window.alert('this.state.ethSwap.address!'+this.state.ethSwap.address)\n\n      if (_this.state.token && _this.state.token.methods) {\n        window.alert('entro67');\n\n        var _tokenAmount = window.web3.utils.toWei(\"10\", \"ether\"); // Example token amount\n\n\n        var senderAddress = \"0x353c18E9C26fa6aB99C3FbB93B20A1C45B747C9B\"; // Your address here\n\n        _this.state.token.methods.approve(senderAddress, _tokenAmount).send({\n          from: senderAddress\n        }).then(function (receipt) {\n          window.alert('aqui22' + receipt);\n        }).catch(function (error) {\n          window.alert('aqui77' + error);\n        });\n      } else {\n        window.alert('fifgfg');\n      }\n\n      window.alert('fin'); //  window.alert('tokenAmount:!'+this.state.account);\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.token.methods.approve('0x353c18E9C26fa6aB99C3FbB93B20A1C45B747C9B', tokenAmount).send({\n        from: '0x71Be5028d3288Da3712Be86B6864855F046Ae769'\n      }).on('transactionHash', function (hash) {\n        window.alert('aentro aq');\n\n        _this.state.ethSwap.methods.sellTokens(tokenAmount).send({\n          value: tokenAmount,\n          from: '0x71Be5028d3288Da3712Be86B6864855F046Ae769'\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          buyTokens: this.buyTokens,\n          sellTokens: this.sellTokens,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Administrador\\Desktop\\pro01\\eth_swap-6-sell-tokens-fe\\src\\components\\App.js"],"names":["React","Component","Web3","Token","EthSwap","Navbar","Main","WalletConnectProvider","QRCode","App","loadWeb3","loadBlockchainData","window","ethereum","web3","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","networkId","net","getId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethSwap","loading","enable","currentProvider","require","isListening","then","catch","err","console","error","balance","weiBalance","utils","toWei","fromWei","tokenAddress","props","buyTokens","etherAmount","send","value","from","on","hash","sellTokens","tokenAmount","senderAddress","approve","receipt","content","maxWidth"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Token from '../abis/Token.json'\nimport EthSwap from '../abis/EthSwap.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\nimport QRCode from 'qrcode.react';  // Librería para generar el código QR\n\nclass App extends Component {\n\n  \n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n\n\n    // Asegúrate de que MetaMask esté disponible en el navegador (ya sea en desktop )\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum);\n      \n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const ethBalance = await web3.eth.getBalance(this.state.account)\n    this.setState({ ethBalance })\n\n    // Load Token\n    const networkId =  web3.eth.net.getId()\n    const tokenData = Token.networks[networkId]\n    if(tokenData) {\n      const token = new web3.eth.Contract(Token.abi, tokenData.address)\n      this.setState({ token })\n      this.setState({accounts: accounts[0]})\n  //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\n\n    if (tokenBalance != null) {\n      this.setState({ tokenBalance: tokenBalance.toString() })\n    }\n    } else {\n      window.alert('Token contract not deployed to detected network.')\n    }\n\n    // Load EthSwap\n    const ethSwapData = EthSwap.networks[networkId]\n    if(ethSwapData) {\n      const ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      this.setState({ ethSwap })\n    } else {\n      window.alert('EthSwap contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n  }else {\n    //getBalance();\n\n          // Crea un nuevo proveedor WalletConnect\n         // const web3 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n             \n    \n  }\n}\n  async loadWeb3() {\n  // window.alert(window.ethereum)\n  //  window.alert(window.web3)\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n         \n      const Web3 = require('web3');\n\n///NI\n// Asegúrate de que web3 está conectado al nodo de Ganache o MetaMask\nwindow.web3 = new Web3(window.ethereum || 'HTTP://192.168.0.6:8545');  // Usar MetaMask o el nodo local\n // const window.web3 = new Web3(new Web3.providers.HttpProvider(uri));\n //window.web3 = new Web3(window.ethereum)\n\n// Asegúrate de que web3 está configurado correctamente\n//const web3 = new Web3('http://127.0.0.1:8545');  // Nodo local de Ganache\n\n// Verificar la conexión\nwindow.web3.eth.net.isListening()\n    .then(() => {\n      window.alert(`Bienvenida a SOFTMarKa: Estas conectada a la red cuentas de Ethereum con ID: KatheVA`);\n    })\n    .catch(err => {\n        console.error('No se pudo conectar al nodo local:', err);\n        window.alert(`aqui no Conectado a la red con ID: ${err}`);\n\n    });\n\n\n// Obtener el networkId de la red conectada\n//const networkId =  5777\n//window.alert(5777);\nwindow.web3.eth.net.getId()\n    .then(networkId => {\n\n   //   window.alert('ENTRO')\n        window.web3.eth.getAccounts().then(accounts => {\n         // window.alert(accounts[0]);\n          this.setState({ account: accounts[0] })\n          this.state.account= accounts[0]\n\n          window.web3.eth.getBalance(this.state.account).then((balance) => {\n            // Convertir el balance de Wei a Ether\n\n        ///   window.alert(balance);\n\n            const weiBalance = window.web3.utils.toWei(balance, 'ether');\n            const ethBalance = window.web3.utils.fromWei(weiBalance, 'ether');\n            this.setState({ ethBalance })\n          //  window.alert(balance);\n          });\n      \n        }).catch(error => {\n          window.alert(error);\n        });\n\n       // window.alert(networkId)\n        const tokenData = Token.networks[networkId];  // Token es tu contrato ABI y redes\n       // window.alert(tokenData)\n        if (tokenData) {\n          window.alert( 'entra ')\n            const tokenAddress = tokenData.address;\n            // Crear una instancia del contrato Token en esa red\n            const token = new window.web3.eth.Contract(Token.abi, tokenAddress);\n\n            this.setState({ token })\n            this.setState({accounts: accounts[0]})\n        //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n            let tokenBalance = token.methods.balanceOf(this.state.account).call()\n\n          if (tokenBalance != null) {\n            this.setState({ tokenBalance: tokenBalance.toString() })\n          }\n          else {\n            window.alert('Token contract not deployed to detected network.')\n          }\n\n           // console.log(\"Instancia del contrato\", tokenContract);\n        } else {\n            console.error(\"No se encontró información para el networkId\", networkId);\n        }\n\n    // Load EthSwap\n \n    const ethSwapData = EthSwap.networks[5777]\n\n    if(ethSwapData) {\n     \n    //  const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      \n      ethSwap.address=ethSwapData.address\n      window.alert( ethSwap.address)\n      this.setState({ ethSwap })\n     \n    \n    } else {\n      window.alert('aqio06 EthSwap contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n\n   // window.alert('AQUI05')\n\n    })\n    .catch(error => {\n       // console.error('Error al obtener el networkId:', error);\n        window.alert(`ÀQUI01 NO Conectado a la red con ID:}`+error);\n    });\n\n\n// FIB\n   \n///fin\n\n    }  \n\n  }\n\n  buyTokens = (etherAmount) => {\n    \n    //window.alert('this.state.account:!'+this.state.methods);\n    this.setState({ loading: true })\n    this.state.ethSwap.methods.buyTokens().send({ value: etherAmount, from: this.state.account }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  sellTokens = (tokenAmount) => {\n\n      window.alert('this.state.token!'+this.state.token)\n      window.alert('this.state.token.methods!'+this.state.token.methods)\n     \n     \n    // window.alert('this.state.ethSwap.address!'+this.state.ethSwap.address)\n    if (this.state.token && this.state.token.methods) {\n\n      window.alert('entro67');\n      const tokenAmount = window.web3.utils.toWei(\"10\", \"ether\"); // Example token amount\n      const senderAddress = \"0x353c18E9C26fa6aB99C3FbB93B20A1C45B747C9B\";  // Your address here\n    \n  \n\n\n      this.state.token.methods.approve(senderAddress, tokenAmount)\n        .send({ from: senderAddress })\n        .then((receipt) => {\n          window.alert('aqui22'+receipt);\n        })\n        .catch((error) => {\n          window.alert('aqui77'+error);\n        });\n    } else {\n      window.alert('fifgfg');\n    }\n\n\n     window.alert('fin');\n   //  window.alert('tokenAmount:!'+this.state.account);\n    this.setState({ loading: true })\n    this.state.token.methods.approve('0x353c18E9C26fa6aB99C3FbB93B20A1C45B747C9B',tokenAmount).send({from:'0x71Be5028d3288Da3712Be86B6864855F046Ae769' }).on('transactionHash', (hash) => {\n   \n       \n      window.alert('aentro aq');\n      this.state.ethSwap.methods.sellTokens(tokenAmount).send({ value: tokenAmount, from: '0x71Be5028d3288Da3712Be86B6864855F046Ae769' }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    if(this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main\n        ethBalance={this.state.ethBalance}\n        tokenBalance={this.state.tokenBalance}\n        buyTokens={this.buyTokens}\n        sellTokens={this.sellTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}