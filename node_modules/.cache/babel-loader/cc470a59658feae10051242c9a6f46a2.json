{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Token from '../abis/Token.json';\nimport EthSwap from '../abis/EthSwap.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport './App.css';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport QRCode from 'qrcode.react'; // Librería para generar el código QR\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, networkId, tokenData, token, tokenBalance, ethSwapData, ethSwap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof window.ethereum !== 'undefined')) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.getBalance(this.state.account);\n\n              case 8:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); // Load Token\n\n                _context2.next = 12;\n                return web3.eth.net.getId();\n\n              case 12:\n                networkId = _context2.sent;\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                token = new web3.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                this.setState({\n                  accounts: accounts[0]\n                }); //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n\n                _context2.next = 20;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 20:\n                tokenBalance = _context2.sent;\n\n                if (tokenBalance != null) {\n                  this.setState({\n                    tokenBalance: tokenBalance.toString()\n                  });\n                }\n\n                _context2.next = 25;\n                break;\n\n              case 24:\n                window.alert('Token contract not deployed to detected network.');\n\n              case 25:\n                // Load EthSwap\n                ethSwapData = EthSwap.networks[networkId];\n\n                if (ethSwapData) {\n                  ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                  this.setState({\n                    ethSwap: ethSwap\n                  });\n                } else {\n                  window.alert('EthSwap contract not deployed to detected network.');\n                }\n\n                this.setState({\n                  loading: false\n                });\n                _context2.next = 30;\n                break;\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _Web;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  _Web = require('web3'); ///NI\n                  // Asegúrate de que web3 está conectado al nodo de Ganache o MetaMask\n\n                  window.web3 = new _Web(window.ethereum || 'HTTP://192.168.0.6:8545'); // Usar MetaMask o el nodo local\n                  // const window.web3 = new Web3(new Web3.providers.HttpProvider(uri));\n                  //window.web3 = new Web3(window.ethereum)\n                  // Asegúrate de que web3 está configurado correctamente\n                  //const web3 = new Web3('http://127.0.0.1:8545');  // Nodo local de Ganache\n                  // Verificar la conexión\n\n                  window.web3.eth.net.isListening().then(function () {\n                    window.alert(\"YESonectado a la red con ID:}\");\n                  }).catch(function (err) {\n                    console.error('No se pudo conectar al nodo local:', err);\n                    window.alert(\"aqui no Conectado a la red con ID: \".concat(err));\n                  }); // Obtener el networkId de la red conectada\n\n                  window.web3.eth.net.getId().then(function (networkId) {\n                    window.alert(\"Conectado a la red con ID: \".concat(networkId));\n                    var accounts = '0x71Be5028d3288Da3712Be86B6864855F046Ae769';\n                    window.alert(accounts);\n\n                    _this2.setState({\n                      account: accounts[0]\n                    });\n\n                    var ethBalance = window.web3.eth.getBalance('0x71Be5028d3288Da3712Be86B6864855F046Ae769');\n\n                    _this2.setState({\n                      ethBalance: ethBalance\n                    }); // Aquí debes tener acceso a los datos de tu contrato Token\n                    // Asegúrate de que Token.json tenga los detalles de la red 5777 si es Ganache\n\n\n                    var tokenData = Token.networks[networkId]; // Token es tu contrato ABI y redes\n\n                    if (tokenData) {\n                      console.log(\"Datos del contrato:\", tokenData);\n                      var tokenAddress = tokenData.address; // Crear una instancia del contrato Token en esa red\n\n                      var tokenContract = new window.web3.eth.Contract(Token.abi, tokenAddress);\n                      console.log(\"Instancia del contrato\", tokenContract);\n                    } else {\n                      console.error(\"No se encontró información para el networkId\", networkId);\n                    }\n                  }).catch(function (error) {\n                    console.error('Error al obtener el networkId:', error);\n                    window.alert(\"NO Conectado a la red con ID:}\" + error);\n                  }); // FIB\n                  ///fin\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      window.alert('this.state.account:!' + _this.state.methods);\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.ethSwap.methods.buyTokens().send({\n        value: etherAmount,\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.sellTokens = function (tokenAmount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.token.methods.approve(_this.state.ethSwap.address, tokenAmount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.ethSwap.methods.sellTokens(tokenAmount).send({\n          value: tokenAmount,\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          buyTokens: this.buyTokens,\n          sellTokens: this.sellTokens,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Administrador\\Desktop\\pro01\\eth_swap-6-sell-tokens-fe\\src\\components\\App.js"],"names":["React","Component","Web3","Token","EthSwap","Navbar","Main","WalletConnectProvider","QRCode","App","loadWeb3","loadBlockchainData","window","ethereum","web3","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","net","getId","networkId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethSwap","loading","enable","currentProvider","require","isListening","then","catch","err","console","error","log","tokenAddress","tokenContract","props","buyTokens","etherAmount","send","value","from","on","hash","sellTokens","tokenAmount","approve","content","maxWidth"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Token from '../abis/Token.json'\nimport EthSwap from '../abis/EthSwap.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\nimport QRCode from 'qrcode.react';  // Librería para generar el código QR\n\nclass App extends Component {\n\n  \n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n\n\n    // Asegúrate de que MetaMask esté disponible en el navegador (ya sea en desktop )\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum);\n      \n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const ethBalance = await web3.eth.getBalance(this.state.account)\n    this.setState({ ethBalance })\n\n    // Load Token\n    const networkId =  await web3.eth.net.getId()\n    const tokenData = Token.networks[networkId]\n    if(tokenData) {\n      const token = new web3.eth.Contract(Token.abi, tokenData.address)\n      this.setState({ token })\n      this.setState({accounts: accounts[0]})\n  //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\n\n    if (tokenBalance != null) {\n      this.setState({ tokenBalance: tokenBalance.toString() })\n    }\n    } else {\n      window.alert('Token contract not deployed to detected network.')\n    }\n\n    // Load EthSwap\n    const ethSwapData = EthSwap.networks[networkId]\n    if(ethSwapData) {\n      const ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      this.setState({ ethSwap })\n    } else {\n      window.alert('EthSwap contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n  }else {\n    //getBalance();\n\n          // Crea un nuevo proveedor WalletConnect\n         // const web3 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n             \n    \n  }\n}\n  async loadWeb3() {\n  // window.alert(window.ethereum)\n  //  window.alert(window.web3)\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n         \n      const Web3 = require('web3');\n\n///NI\n// Asegúrate de que web3 está conectado al nodo de Ganache o MetaMask\nwindow.web3 = new Web3(window.ethereum || 'HTTP://192.168.0.6:8545');  // Usar MetaMask o el nodo local\n // const window.web3 = new Web3(new Web3.providers.HttpProvider(uri));\n //window.web3 = new Web3(window.ethereum)\n\n// Asegúrate de que web3 está configurado correctamente\n//const web3 = new Web3('http://127.0.0.1:8545');  // Nodo local de Ganache\n\n// Verificar la conexión\nwindow.web3.eth.net.isListening()\n    .then(() => {\n      window.alert(`YESonectado a la red con ID:}`);\n    })\n    .catch(err => {\n        console.error('No se pudo conectar al nodo local:', err);\n        window.alert(`aqui no Conectado a la red con ID: ${err}`);\n\n    });\n\n\n// Obtener el networkId de la red conectada\n\nwindow.web3.eth.net.getId()\n    .then(networkId => {\n        window.alert(`Conectado a la red con ID: ${networkId}`);\n\n        const accounts = '0x71Be5028d3288Da3712Be86B6864855F046Ae769'\n        \n        \n        window.alert(accounts);\n        this.setState({ account: accounts[0] })\n\n\n    \n        const ethBalance = window.web3.eth.getBalance('0x71Be5028d3288Da3712Be86B6864855F046Ae769')\n        this.setState({ ethBalance })\n\n\n\n\n        // Aquí debes tener acceso a los datos de tu contrato Token\n        // Asegúrate de que Token.json tenga los detalles de la red 5777 si es Ganache\n        const tokenData = Token.networks[networkId];  // Token es tu contrato ABI y redes\n\n        if (tokenData) {\n            console.log(\"Datos del contrato:\", tokenData);\n            const tokenAddress = tokenData.address;\n            // Crear una instancia del contrato Token en esa red\n            const tokenContract = new window.web3.eth.Contract(Token.abi, tokenAddress);\n            console.log(\"Instancia del contrato\", tokenContract);\n        } else {\n            console.error(\"No se encontró información para el networkId\", networkId);\n        }\n    })\n    .catch(error => {\n        console.error('Error al obtener el networkId:', error);\n        window.alert(`NO Conectado a la red con ID:}`+error);\n    });\n\n\n\n\n\n// FIB\n   \n///fin\n\n    }  /// window.alert('SI DETECTADOHHH!'+EthSwap.abi+'       ');\n\n  }\n\n  buyTokens = (etherAmount) => {\n    \n    window.alert('this.state.account:!'+this.state.methods);\n    this.setState({ loading: true })\n    this.state.ethSwap.methods.buyTokens().send({ value: etherAmount, from: this.state.account }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  sellTokens = (tokenAmount) => {\n    this.setState({ loading: true })\n    this.state.token.methods.approve(this.state.ethSwap.address,tokenAmount).send({from: this.state.account }).on('transactionHash', (hash) => {\n      this.state.ethSwap.methods.sellTokens(tokenAmount).send({ value: tokenAmount, from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    if(this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main\n        ethBalance={this.state.ethBalance}\n        tokenBalance={this.state.tokenBalance}\n        buyTokens={this.buyTokens}\n        sellTokens={this.sellTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}