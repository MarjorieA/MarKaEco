{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Token from '../abis/Token.json';\nimport EthSwap from '../abis/EthSwap.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport './App.css';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, direccion, _web, accounts, ethBalance, networkId, tokenData, token, tokenBalance, ethSwapData, ethSwap, _web2;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n                web3.eth.getBlockNumber().then(function (blockNumber) {\n                  console.log('Último número de bloque:', blockNumber);\n                }).catch(function (err) {\n                  console.log('Error en la conexión a Web3:', err);\n                });\n                web3.eth.net.isListening().then(function () {\n                  return console.log('Conectado a la red Ethereum a través de Infura');\n                }).catch(function (error) {\n                  return console.log('Error en la conexión:', error);\n                });\n                direccion = '0x...'; // Reemplaza con una dirección de Ethereum válida\n\n                web3.eth.getBalance(direccion).then(function (balanceWei) {\n                  // Convertir el balance de Wei (unidad mínima de ETH) a ETH\n                  var balanceEth = web3.utils.fromWei(balanceWei, 'ether');\n                  console.log(\"El balance de la direcci\\xF3n \".concat(direccion, \" es: \").concat(balanceEth, \" ETH\"));\n                }).catch(function (err) {\n                  console.error('Error al obtener el balance:', err);\n                }); // Asegúrate de que MetaMask esté disponible en el navegador (ya sea en desktop o móvil)\n\n                if (!(typeof window.ethereum !== 'undefined')) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                _web = new Web3(window.ethereum);\n                _context2.next = 9;\n                return _web.eth.getAccounts();\n\n              case 9:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 13;\n                return _web.eth.getBalance(this.state.account);\n\n              case 13:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); // Load Token\n\n                _context2.next = 17;\n                return _web.eth.net.getId();\n\n              case 17:\n                networkId = _context2.sent;\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                token = new _web.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                this.setState({\n                  accounts: accounts[0]\n                }); //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n\n                _context2.next = 25;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                tokenBalance = _context2.sent;\n\n                if (tokenBalance != null) {\n                  this.setState({\n                    tokenBalance: tokenBalance.toString()\n                  });\n                }\n\n                _context2.next = 30;\n                break;\n\n              case 29:\n                window.alert('Token contract not deployed to detected network.');\n\n              case 30:\n                // Load EthSwap\n                ethSwapData = EthSwap.networks[networkId];\n\n                if (ethSwapData) {\n                  ethSwap = new _web.eth.Contract(EthSwap.abi, ethSwapData.address);\n                  this.setState({\n                    ethSwap: ethSwap\n                  });\n                } else {\n                  window.alert('EthSwap contract not deployed to detected network.');\n                }\n\n                this.setState({\n                  loading: false\n                });\n                _context2.next = 38;\n                break;\n\n              case 35:\n                console.log('MetaMask no está disponible en este dispositivo');\n                _web2 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n\n                _web2.eth.getBlockNumber().then(function (blockNumber) {\n                  console.log('Último número de bloque:', blockNumber);\n                }).catch(function (err) {\n                  console.log('Error en la conexión a Web3:', err);\n                });\n\n              case 38:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.ethSwap.methods.buyTokens().send({\n        value: etherAmount,\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.sellTokens = function (tokenAmount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.token.methods.approve(_this.state.ethSwap.address, tokenAmount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.ethSwap.methods.sellTokens(tokenAmount).send({\n          value: tokenAmount,\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          buyTokens: this.buyTokens,\n          sellTokens: this.sellTokens,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Administrador\\Desktop\\pro01\\eth_swap-6-sell-tokens-fe\\src\\components\\App.js"],"names":["React","Component","Web3","Token","EthSwap","Navbar","Main","WalletConnectProvider","App","loadWeb3","loadBlockchainData","web3","eth","getBlockNumber","then","blockNumber","console","log","catch","err","net","isListening","error","direccion","getBalance","balanceWei","balanceEth","utils","fromWei","window","ethereum","getAccounts","accounts","setState","account","state","ethBalance","getId","networkId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethSwap","loading","enable","currentProvider","props","buyTokens","etherAmount","send","value","from","on","hash","sellTokens","tokenAmount","approve","content","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Token from '../abis/Token.json'\nimport EthSwap from '../abis/EthSwap.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n\n\n    const web3 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n    web3.eth.getBlockNumber()\n    .then((blockNumber) => {\n      console.log('Último número de bloque:', blockNumber);\n    })\n    .catch((err) => {\n      console.log('Error en la conexión a Web3:', err);\n    })\n\n    web3.eth.net.isListening()\n  .then(() => console.log('Conectado a la red Ethereum a través de Infura'))\n  .catch((error) => console.log('Error en la conexión:', error));\n\n\n  const direccion = '0x...'; // Reemplaza con una dirección de Ethereum válida\n\n  web3.eth.getBalance(direccion)\n    .then((balanceWei) => {\n      // Convertir el balance de Wei (unidad mínima de ETH) a ETH\n      const balanceEth = web3.utils.fromWei(balanceWei, 'ether');\n      console.log(`El balance de la dirección ${direccion} es: ${balanceEth} ETH`);\n    })\n    .catch((err) => {\n      console.error('Error al obtener el balance:', err);\n    });\n  \n\n\n    // Asegúrate de que MetaMask esté disponible en el navegador (ya sea en desktop o móvil)\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum);\n      \n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const ethBalance = await web3.eth.getBalance(this.state.account)\n    this.setState({ ethBalance })\n\n    // Load Token\n    const networkId =  await web3.eth.net.getId()\n    const tokenData = Token.networks[networkId]\n    if(tokenData) {\n      const token = new web3.eth.Contract(Token.abi, tokenData.address)\n      this.setState({ token })\n      this.setState({accounts: accounts[0]})\n  //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\n\n    if (tokenBalance != null) {\n      this.setState({ tokenBalance: tokenBalance.toString() })\n    }\n    } else {\n      window.alert('Token contract not deployed to detected network.')\n    }\n\n    // Load EthSwap\n    const ethSwapData = EthSwap.networks[networkId]\n    if(ethSwapData) {\n      const ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      this.setState({ ethSwap })\n    } else {\n      window.alert('EthSwap contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n  }else {\n    console.log('MetaMask no está disponible en este dispositivo');\n    const web3 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n    web3.eth.getBlockNumber()\n    .then((blockNumber) => {\n      console.log('Último número de bloque:', blockNumber);\n    })\n    .catch((err) => {\n      console.log('Error en la conexión a Web3:', err);\n    })\n    \n  }\n}\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  buyTokens = (etherAmount) => {\n    this.setState({ loading: true })\n    this.state.ethSwap.methods.buyTokens().send({ value: etherAmount, from: this.state.account }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  sellTokens = (tokenAmount) => {\n    this.setState({ loading: true })\n    this.state.token.methods.approve(this.state.ethSwap.address,tokenAmount).send({from: this.state.account }).on('transactionHash', (hash) => {\n      this.state.ethSwap.methods.sellTokens(tokenAmount).send({ value: tokenAmount, from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    if(this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main\n        ethBalance={this.state.ethBalance}\n        tokenBalance={this.state.tokenBalance}\n        buyTokens={this.buyTokens}\n        sellTokens={this.sellTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}