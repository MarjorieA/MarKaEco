{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\pro01\\\\eth_swap-6-sell-tokens-fe\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Token from '../abis/Token.json';\nimport EthSwap from '../abis/EthSwap.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport './App.css';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport QRCode from 'qrcode.react'; // Librería para generar el código QR\n\nimport { SpeedInsights } from \"@vercel/speed-insights/react\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, networkId, tokenData, token, tokenBalance, ethSwapData, ethSwap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof window.ethereum !== 'undefined')) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.getBalance(this.state.account);\n\n              case 8:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); // Load Token\n\n                networkId = web3.eth.net.getId();\n                tokenData = Token.networks[networkId]; // window.alert(networkId)\n\n                if (!tokenData) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                token = new web3.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                this.setState({\n                  accounts: accounts[0]\n                }); //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n\n                _context2.next = 18;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 18:\n                tokenBalance = _context2.sent;\n\n                if (tokenBalance != null) {\n                  this.setState({\n                    tokenBalance: tokenBalance.toString()\n                  });\n                }\n\n                _context2.next = 23;\n                break;\n\n              case 22:\n                window.alert('Token contract not deployed to detected network.');\n\n              case 23:\n                // Load EthSwap\n                ethSwapData = EthSwap.networks[networkId];\n                window.alert(networkId);\n\n                if (ethSwapData) {\n                  ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                  this.setState({\n                    ethSwap: ethSwap\n                  });\n                } else {\n                  window.alert('EthSwap contract not deployed to detected network.');\n                }\n\n                this.setState({\n                  loading: false\n                });\n                _context2.next = 29;\n                break;\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _Web;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //window.alert(window.ethereum)\n                //window.alert(window.web3)\n                if (window.ethereum) {\n                  //window.alert(window.ethereum)\n                  window.web3 = new Web3(window.ethereum); //web3 = new Web3(window.ethereum);\n                  //window.ethereum.request({ method: 'eth_requestAccounts' });\n\n                  window.web3 = new Web3(new Web3.providers.HttpProvider('http://192.168.0.5:8545')); //window.web3 = new Web3(window.ethereum || 'http://192.168.0.5:8545'); \n\n                  if (window.web3) {\n                    window.alert(\"Conectado a la red Ethereum.\");\n                  } else {\n                    window.alert(\"No Conectado a la red Ethereum.\");\n                  }\n\n                  window.web3.eth.net.isListening().then(function () {\n                    window.alert(\"Bienvenida a Tierra de MarKa: Estas conectada a la red cuentas de Ethereum con ID: KatheVA\");\n                  }).catch(function (err) {\n                    //console.error('No se pudo conectar al nodo local:', err);\n                    window.alert(\"aqui no Conectado a la red con ID: \".concat(err));\n                  });\n                  window.web3.eth.net.getId().then(function (networkId) {\n                    //  window.alert('ENTRO01')\n                    window.web3.eth.getAccounts().then(function (accounts) {\n                      _this2.setState({\n                        account: accounts[0]\n                      });\n\n                      _this2.state.account = accounts[0];\n                      window.alert(_this2.state.account);\n                      window.web3.eth.getBalance(_this2.state.account).then(function (balance) {\n                        // Convertir el balance de Wei a Ether\n                        //    \n                        window.alert(accounts[0]);\n                        var weiBalance = window.web3.utils.toWei(balance, 'ether');\n                        var ethBalance = window.web3.utils.fromWei(weiBalance, 'ether');\n\n                        _this2.setState({\n                          ethBalance: ethBalance\n                        }); //  window.alert(balance);\n\n                      });\n                    }).catch(function (error) {\n                      //  window.alert('ENTRO02')\n                      window.alert(error);\n                    }); //window.alert(networkId)\n\n                    var tokenData = Token.networks[5777]; // Token es tu contrato ABI y redes\n                    //  window.alert(tokenData)\n                    // window.alert(tokenData)\n\n                    if (tokenData) {\n                      //  window.alert( 'entra ')\n                      var tokenAddress = tokenData.address; //window.alert(tokenAddress);\n                      // Crear una instancia del contrato Token en esa red\n\n                      var token = new window.web3.eth.Contract(Token.abi, tokenAddress);\n\n                      _this2.setState({\n                        token: token\n                      }); // window.alert();\n                      // console.log(\"Instancia del contrato\", tokenContract);\n\n                    } else {\n                      console.error(\"No se encontró información para el networkId\", networkId);\n                    } // Load EthSwap\n\n\n                    var ethSwapData = EthSwap.networks[5777];\n\n                    if (ethSwapData) {\n                      //  const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n                      var ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                      ethSwap.address = ethSwapData.address; //  window.alert( ethSwap.address)\n\n                      _this2.setState({\n                        ethSwap: ethSwap\n                      });\n                    } else {\n                      window.alert('aqio06 EthSwap contract not deployed to detected network.');\n                    }\n\n                    _this2.setState({\n                      loading: false\n                    }); // window.alert('AQUI05')\n\n                  }).catch(function (error) {\n                    // console.error('Error al obtener el networkId:', error);\n                    window.alert(\"\\xC0QUI01 NO Conectado a la red con ID:}\" + error);\n                  }); //await window.web3.enable()\n                } else if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  _Web = require('web3'); ///NI127.0.0.1:8545\n                  // Asegúrate de que web3 está conectado al nodo de Ganache o MetaMask\n\n                  window.web3 = new _Web(window.ethereum || 'http://192.168.0.5:8545'); //\n                  //window.web3 = new Web3(window.ethereum || 'HTTP://192.168.1.100:8545');  // Usar MetaMask o el nodo local\n                  // window.web3 = new Web3(window.ethereum)\n                  // const window.web3 = new Web3(new Web3.providers.HttpProvider(uri));\n                  //window.web3 = new Web3(window.ethereum)\n                  // Asegúrate de que web3 está configurado correctamente\n                  //const web3 = new Web3('http://127.0.0.1:8545');  // Nodo local de Ganache\n                  //window.alert(`aqu`);\n                  // Verificar la conexión\n\n                  if (window.web3) {//  window.alert(`Conectado a la red Ethereum.`);\n                  } else {\n                    window.alert(\"No Conectado a la red Ethereum.\");\n                  }\n\n                  window.web3.eth.net.isListening().then(function () {// window.alert(`Bienvenida a SOFTMarKa: Estas conectada a la red cuentas de Ethereum con ID: KatheVA`);\n                  }).catch(function (err) {\n                    //console.error('No se pudo conectar al nodo local:', err);\n                    window.alert(\"aqui no Conectado a la red con ID: \".concat(err));\n                  });\n                  /*\n                  // Verifica si tienes el objeto web3 disponible\n                  if (typeof window.ethereum !== 'undefined') {\n                    // Solicitar permiso para acceder a las cuentas de MetaMask\n                    window.ethereum.request({ method: 'eth_requestAccounts' })\n                      .then(accounts => {\n                        console.log(\"Cuentas:\", accounts);\n                        window.alert(accounts);\n                      })\n                      .catch(error => {\n                        window.alert(`ddd: ${error}`);\n                      });\n                  } else {\n                    window.alert(`dff`);\n                  }\n                  */\n\n                  window.web3.eth.net.getId().then(function (networkId) {\n                    //  window.alert('ENTRO01')\n                    window.web3.eth.getAccounts().then(function (accounts) {\n                      _this2.setState({\n                        account: accounts[0]\n                      });\n\n                      _this2.state.account = accounts[0];\n                      window.alert(_this2.state.account);\n                      window.web3.eth.getBalance(_this2.state.account).then(function (balance) {\n                        // Convertir el balance de Wei a Ether\n                        //    \n                        window.alert(accounts[0]);\n                        var weiBalance = window.web3.utils.toWei(balance, 'ether');\n                        var ethBalance = window.web3.utils.fromWei(weiBalance, 'ether');\n\n                        _this2.setState({\n                          ethBalance: ethBalance\n                        }); //  window.alert(balance);\n\n                      });\n                    }).catch(function (error) {\n                      //  window.alert('ENTRO02')\n                      window.alert(error);\n                    }); //window.alert(networkId)\n\n                    var tokenData = Token.networks[5777]; // Token es tu contrato ABI y redes\n                    //  window.alert(tokenData)\n                    // window.alert(tokenData)\n\n                    if (tokenData) {\n                      //  window.alert( 'entra ')\n                      var tokenAddress = tokenData.address; //window.alert(tokenAddress);\n                      // Crear una instancia del contrato Token en esa red\n\n                      var token = new window.web3.eth.Contract(Token.abi, tokenAddress);\n\n                      _this2.setState({\n                        token: token\n                      }); // window.alert();\n                      // console.log(\"Instancia del contrato\", tokenContract);\n\n                    } else {\n                      console.error(\"No se encontró información para el networkId\", networkId);\n                    } // Load EthSwap\n\n\n                    var ethSwapData = EthSwap.networks[5777];\n\n                    if (ethSwapData) {\n                      //  const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n                      var ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                      ethSwap.address = ethSwapData.address; //  window.alert( ethSwap.address)\n\n                      _this2.setState({\n                        ethSwap: ethSwap\n                      });\n                    } else {\n                      window.alert('aqio06 EthSwap contract not deployed to detected network.');\n                    }\n\n                    _this2.setState({\n                      loading: false\n                    }); // window.alert('AQUI05')\n\n                  }).catch(function (error) {\n                    // console.error('Error al obtener el networkId:', error);\n                    window.alert(\"\\xC0QUI01 NO Conectado a la red con ID:}\" + error);\n                  }); // FIB\n                  ///fin\n                }\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.ethSwap.methods.buyTokens().send({\n        value: etherAmount,\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n\n        window.alert('Enviado a Soft-Mar-Ka exitosamente : ' + etherAmount); // window.alert('this.state.account:!'+this.state.ethSwap.methods);\n      }).on('receipt', function (receipt) {//window.alert('SIIthis.state.account:!'+receipt);\n      }).on('error', function (error) {\n        console.error(\"Error:\", error);\n        window.alert('SIIthis.state.account:!' + error);\n      }).catch(function (error) {\n        window.alert('no' + error);\n      });\n    };\n\n    _this.sellTokens = function (tokenAmount) {\n      // window.alert('afuera token!'+this.state.token )\n      // window.alert('afuera address!'+this.state.token.methods)\n      if (_this.state.token && _this.state.token.methods) {\n        //   window.alert('entra address!'+tokenAmount) // 41  acounts 5bD\n        //  window.alert('ethSwap.address:!'+this.state.ethSwap.address);\n        //  window.alert('account:!'+this.state.account);\n        _this.state.token.methods.approve(_this.state.account, tokenAmount).send({\n          from: _this.state.ethSwap.address\n        }).then(function (receipt) {\n          // window.alert('yes'+receipt);\n          //  window.alert('aprobado:!'+this.state.account);\n          //  window.alert('tokenAmount:!'+this.state.account);\n          _this.setState({\n            loading: true\n          }); //  this.state.token.methods.approve('0x353c18E9C26fa6aB99C3FbB93B20A1C45B747C9B',tokenAmount).send({from:'0x71Be5028d3288Da3712Be86B6864855F046Ae769' }).on('transactionHash', (hash) => {\n          //   window.alert(' 01approve');\n          // window.alert('DESPUES DE aprobado:!'+this.state.account);\n\n\n          _this.state.ethSwap.methods.sellTokens(tokenAmount).send({\n            value: tokenAmount,\n            from: _this.state.ethSwap.address\n          }).on('transactionHash', function (hash) {\n            _this.setState({\n              loading: false\n            }); //\n\n\n            window.alert('Enviado a Soft-Mar-Ka exitosamente : ' + tokenAmount);\n          }).catch(function (hash) {\n            window.alert('no' + hash);\n          });\n        }).catch(function (receipt) {\n          window.alert('no' + receipt);\n        });\n      } else {\n        window.alert('NO');\n      }\n    };\n\n    _this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          buyTokens: this.buyTokens,\n          sellTokens: this.sellTokens,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 382\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Administrador\\Desktop\\pro01\\eth_swap-6-sell-tokens-fe\\src\\components\\App.js"],"names":["React","Component","Web3","Token","EthSwap","Navbar","Main","WalletConnectProvider","QRCode","SpeedInsights","App","loadWeb3","loadBlockchainData","window","ethereum","web3","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","networkId","net","getId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethSwap","loading","providers","HttpProvider","isListening","then","catch","err","balance","weiBalance","utils","toWei","fromWei","error","tokenAddress","console","currentProvider","require","props","buyTokens","etherAmount","send","value","from","on","hash","receipt","sellTokens","tokenAmount","approve","content","maxWidth"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Token from '../abis/Token.json'\nimport EthSwap from '../abis/EthSwap.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\nimport QRCode from 'qrcode.react';  // Librería para generar el código QR\nimport { SpeedInsights } from \"@vercel/speed-insights/react\"\n\nclass App extends Component {\n\n  \n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n\n\n    // Asegúrate de que MetaMask esté disponible en el navegador (ya sea en desktop )\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum);\n      \n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const ethBalance = await web3.eth.getBalance(this.state.account)\n    this.setState({ ethBalance })\n\n    // Load Token\n    const networkId =  web3.eth.net.getId()\n    const tokenData = Token.networks[networkId]\n   // window.alert(networkId)\n    if(tokenData) {\n      const token = new web3.eth.Contract(Token.abi, tokenData.address)\n      this.setState({ token })\n      this.setState({accounts: accounts[0]})\n  //    let tokenBalance = await token.methods.balanceOf(accounts[0]).call()\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\n\n    if (tokenBalance != null) {\n      this.setState({ tokenBalance: tokenBalance.toString() })\n    }\n    } else {\n      window.alert('Token contract not deployed to detected network.')\n    }\n\n    // Load EthSwap\n    const ethSwapData = EthSwap.networks[networkId]\n    window.alert(networkId)\n    if(ethSwapData) {\n      const ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      this.setState({ ethSwap })\n    } else {\n      window.alert('EthSwap contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n  }else {\n    //getBalance();\n\n          // Crea un nuevo proveedor WalletConnect\n         // const web3 = new Web3('https://mainnet.infura.io/v3/76624e32adc147a8894211e83952c9ec');\n             \n    \n  }\n}\n  async loadWeb3() {\n   //window.alert(window.ethereum)\n    //window.alert(window.web3)\n    if (window.ethereum) {\n      //window.alert(window.ethereum)\n      window.web3 = new Web3(window.ethereum)\n     //web3 = new Web3(window.ethereum);\n      //window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(new Web3.providers.HttpProvider('http://192.168.0.5:8545'));\n      //window.web3 = new Web3(window.ethereum || 'http://192.168.0.5:8545'); \n      if (window.web3) {\n          window.alert(`Conectado a la red Ethereum.`);\n        } else {\n          window.alert(`No Conectado a la red Ethereum.`);\n        }\n      window.web3.eth.net.isListening().then(() => {\n         window.alert(`Bienvenida a Tierra de MarKa: Estas conectada a la red cuentas de Ethereum con ID: KatheVA`);\n        })\n        .catch(err => {\n            //console.error('No se pudo conectar al nodo local:', err);\n            window.alert(`aqui no Conectado a la red con ID: ${err}`);\n    \n        });\n        window.web3.eth.net.getId()\n        .then(networkId => {\n    \n       //  window.alert('ENTRO01')\n            window.web3.eth.getAccounts().then(accounts => {\n        \n              this.setState({ account: accounts[0] })\n              this.state.account= accounts[0]\n              window.alert(this.state.account);\n    \n    \n              window.web3.eth.getBalance(this.state.account).then((balance) => {\n                // Convertir el balance de Wei a Ether\n           //    \n                 window.alert(accounts[0]);\n                const weiBalance = window.web3.utils.toWei(balance, 'ether');\n                const ethBalance = window.web3.utils.fromWei(weiBalance, 'ether');\n                this.setState({ ethBalance })\n              //  window.alert(balance);\n              });\n          \n            }).catch(error => {\n            //  window.alert('ENTRO02')\n              window.alert(error);\n            });\n    \n        //window.alert(networkId)\n            const tokenData = Token.networks[5777];  // Token es tu contrato ABI y redes\n          //  window.alert(tokenData)\n           // window.alert(tokenData)\n            if (tokenData) {\n            //  window.alert( 'entra ')\n                const tokenAddress = tokenData.address;\n               //window.alert(tokenAddress);\n                // Crear una instancia del contrato Token en esa red\n                const token = new window.web3.eth.Contract(Token.abi, tokenAddress);\n            \n                this.setState({ token })\n               // window.alert();\n                \n               // console.log(\"Instancia del contrato\", tokenContract);\n            } else {\n                console.error(\"No se encontró información para el networkId\", networkId);\n            }\n    \n        // Load EthSwap\n     \n        const ethSwapData = EthSwap.networks[5777]\n    \n        if(ethSwapData) {\n         \n        //  const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n          const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n          ethSwap.address=ethSwapData.address\n        //  window.alert( ethSwap.address)\n          this.setState({ ethSwap })\n         \n        \n        } else {\n          window.alert('aqio06 EthSwap contract not deployed to detected network.')\n        }\n    \n        this.setState({ loading: false })\n    \n       // window.alert('AQUI05')\n    \n        })\n        .catch(error => {\n           // console.error('Error al obtener el networkId:', error);\n            window.alert(`ÀQUI01 NO Conectado a la red con ID:}`+error);\n        });\n    \n\n\n   \n      //await window.web3.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n         \n      const Web3 = require('web3');\n\n///NI127.0.0.1:8545\n// Asegúrate de que web3 está conectado al nodo de Ganache o MetaMask\nwindow.web3 = new Web3(window.ethereum || 'http://192.168.0.5:8545');  //\n//window.web3 = new Web3(window.ethereum || 'HTTP://192.168.1.100:8545');  // Usar MetaMask o el nodo local\n\n   // window.web3 = new Web3(window.ethereum)\n // const window.web3 = new Web3(new Web3.providers.HttpProvider(uri));\n //window.web3 = new Web3(window.ethereum)\n\n// Asegúrate de que web3 está configurado correctamente\n//const web3 = new Web3('http://127.0.0.1:8545');  // Nodo local de Ganache\n//window.alert(`aqu`);\n// Verificar la conexión\nif (window.web3) {\n//  window.alert(`Conectado a la red Ethereum.`);\n} else {\n  window.alert(`No Conectado a la red Ethereum.`);\n}\n\n\nwindow.web3.eth.net.isListening()\n\n    .then(() => {\n    // window.alert(`Bienvenida a SOFTMarKa: Estas conectada a la red cuentas de Ethereum con ID: KatheVA`);\n    })\n    .catch(err => {\n        //console.error('No se pudo conectar al nodo local:', err);\n        window.alert(`aqui no Conectado a la red con ID: ${err}`);\n\n    });\n\n\n\n\n/*\n// Verifica si tienes el objeto web3 disponible\nif (typeof window.ethereum !== 'undefined') {\n  // Solicitar permiso para acceder a las cuentas de MetaMask\n  window.ethereum.request({ method: 'eth_requestAccounts' })\n    .then(accounts => {\n      console.log(\"Cuentas:\", accounts);\n      window.alert(accounts);\n    })\n    .catch(error => {\n      window.alert(`ddd: ${error}`);\n    });\n} else {\n  window.alert(`dff`);\n}\n*/\n\n\nwindow.web3.eth.net.getId()\n    .then(networkId => {\n\n   //  window.alert('ENTRO01')\n        window.web3.eth.getAccounts().then(accounts => {\n    \n          this.setState({ account: accounts[0] })\n          this.state.account= accounts[0]\n          window.alert(this.state.account);\n\n\n          window.web3.eth.getBalance(this.state.account).then((balance) => {\n            // Convertir el balance de Wei a Ether\n       //    \n             window.alert(accounts[0]);\n            const weiBalance = window.web3.utils.toWei(balance, 'ether');\n            const ethBalance = window.web3.utils.fromWei(weiBalance, 'ether');\n            this.setState({ ethBalance })\n          //  window.alert(balance);\n          });\n      \n        }).catch(error => {\n        //  window.alert('ENTRO02')\n          window.alert(error);\n        });\n\n    //window.alert(networkId)\n        const tokenData = Token.networks[5777];  // Token es tu contrato ABI y redes\n      //  window.alert(tokenData)\n       // window.alert(tokenData)\n        if (tokenData) {\n        //  window.alert( 'entra ')\n            const tokenAddress = tokenData.address;\n           //window.alert(tokenAddress);\n            // Crear una instancia del contrato Token en esa red\n            const token = new window.web3.eth.Contract(Token.abi, tokenAddress);\n        \n            this.setState({ token })\n           // window.alert();\n            \n           // console.log(\"Instancia del contrato\", tokenContract);\n        } else {\n            console.error(\"No se encontró información para el networkId\", networkId);\n        }\n\n    // Load EthSwap\n \n    const ethSwapData = EthSwap.networks[5777]\n\n    if(ethSwapData) {\n     \n    //  const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      const ethSwap = new window.web3.eth.Contract(EthSwap.abi, ethSwapData.address)\n      ethSwap.address=ethSwapData.address\n    //  window.alert( ethSwap.address)\n      this.setState({ ethSwap })\n     \n    \n    } else {\n      window.alert('aqio06 EthSwap contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n\n   // window.alert('AQUI05')\n\n    })\n    .catch(error => {\n       // console.error('Error al obtener el networkId:', error);\n        window.alert(`ÀQUI01 NO Conectado a la red con ID:}`+error);\n    });\n\n\n// FIB\n   \n///fin\n\n    }  \n\n  }\n\n  buyTokens = (etherAmount) => {\n    \n    this.setState({ loading: true })\n    this.state.ethSwap.methods.buyTokens().send({ value: etherAmount, from: this.state.account }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n      window.alert('Enviado a Soft-Mar-Ka exitosamente : '+etherAmount);\n     // window.alert('this.state.account:!'+this.state.ethSwap.methods);\n    }).on('receipt', function(receipt) {\n      //window.alert('SIIthis.state.account:!'+receipt);\n    })\n    .on('error', function(error) {\n      console.error(\"Error:\", error);\n      window.alert('SIIthis.state.account:!'+error);\n    })\n  .catch((error) => {\n    window.alert('no'+error);\n  });\n  }\n\n  sellTokens = (tokenAmount) => {\n   // window.alert('afuera token!'+this.state.token )\n   // window.alert('afuera address!'+this.state.token.methods)\n    if (this.state.token && this.state.token.methods) {\n   //   window.alert('entra address!'+tokenAmount) // 41  acounts 5bD\n    //  window.alert('ethSwap.address:!'+this.state.ethSwap.address);\n    //  window.alert('account:!'+this.state.account);\n      this.state.token.methods.approve(this.state.account, tokenAmount).send({ from: this.state.ethSwap.address}).then((receipt) => {\n         // window.alert('yes'+receipt);\n       //  window.alert('aprobado:!'+this.state.account);\n             //  window.alert('tokenAmount:!'+this.state.account);\n          this.setState({ loading: true })\n        //  this.state.token.methods.approve('0x353c18E9C26fa6aB99C3FbB93B20A1C45B747C9B',tokenAmount).send({from:'0x71Be5028d3288Da3712Be86B6864855F046Ae769' }).on('transactionHash', (hash) => {\n         //   window.alert(' 01approve');\n         // window.alert('DESPUES DE aprobado:!'+this.state.account);\n          \n            this.state.ethSwap.methods.sellTokens(tokenAmount).send({ value: tokenAmount, from:this.state.ethSwap.address}).on('transactionHash', (hash) => {\n              this.setState({ loading: false })   \n                         //\n            window.alert('Enviado a Soft-Mar-Ka exitosamente : '+tokenAmount);\n            })  \n            .catch((hash) => {\n              window.alert('no'+hash);\n            });\n        })\n        .catch((receipt) => {\n          window.alert('no'+receipt);\n        });\n    } else {\n      window.alert('NO');\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      token: {},\n      ethSwap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    if(this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main\n        ethBalance={this.state.ethBalance}\n        tokenBalance={this.state.tokenBalance}\n        buyTokens={this.buyTokens}\n        sellTokens={this.sellTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}